*** xpath模糊查询方法
             contains(元素，匹配的字符串)
             eg: //div[contains(@id,"aaa")]

一,正则笔记
    正则表达式中的匹配符号和规则:
        1，？ 匹配零次或一次前面的分组
        2，*  匹配零次或多次前面的分组
        3，+  匹配一次或多次前面的分组
        4，{n}  匹配n次前面的分组
        5，{n，} 匹配 n 次会更多次前面的分组
        6，{，m} 匹配零次到 m 次前面的分组
        8，{n，m} 匹配至少 n 次、最多 m 次前面的分组
        9，{n，m}？或*？或+？ 对前面的分组进行非贪心匹配，贪心匹配会尽可能的取长的字符串，而非贪心匹配相反，尽可能的取短的字符串
        10，^spam  意味着字符串必须以spam开始
        11，spam$  意味着字符串必须以spam结束
        12，. （句点）匹配所有的字符，换行符除外
        13，\d、\w和\s分别匹配数字、单词和空格
        14，\D、\W和\S分别匹配除了数字、单词和空格之外的所有字符
        15，[abc]  匹配方括号内的任意字符（诸如a、b或c）
        16，[^abc]  匹配不在方括号内的任意字符
        17，\b 匹配一个单词边界，也就是指单词和空格间的位置

    Python里 re 模块有两种方式

        将正则表达式编译成一个Pattern规则对象
        pattern = re.compile("\d")

        pattern.match()   从开始位置往后查找,返回第一个符合规则的对象
        pattern.search()  从任何位置开始查找,返回第一个符合规则的对象
        pattern.findall()  所有的全部匹配,返回列表
        pattern.finditer() 所有的全部匹配,返回迭代器
        pattern.split()   分割字符串,返回列表
        pattern.sub()    替换

        match(str,begin,end) str:要操作的字符串; begin:开始位置角标; end:结束位置角标

        re.I 表示忽略大小写
        re.S 表示全文匹配

        search(str,begin,end)  str:要操作的字符串; begin:开始位置角标; end:结束位置角标

        findall(str,begin,end)  str:要操作的字符串; begin:开始位置角标; end:结束位置角标




